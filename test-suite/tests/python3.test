;; -*- mode: scheme -*-

(define-module (test-suite test-python3)
  :use-module (test-suite lib)
  :use-module (language python3 parse)
  :use-module (ice-9 regex)
  :use-module (ice-9 eval-string)
  :use-module (srfi srfi-1)
  :use-module (language python3 commons))

(define (test-parse str expected)
  "Runs a parse test."
  (let ((test-fun (lambda (str) (read-python3 (open-input-string str)))))
    (run-test test-fun equal? str expected)))

(define (test-eval str expected)
  "Runs a evaluation test. Dummy implementation until eval-string is
possible"
  ;; (debug "str =" str)
  (let ((test-fun (lambda (str) (eval-string str #:lang 'python3))))
    (run-test test-fun equal? str expected)))

(define (run-test fun cmp-fun str expected)
  "Runs a test. Outputs some extra information in case a test case
failed."
  (let ((res (fun str)))
    (if (not (cmp-fun res expected))
        (begin
          (display (string-concatenate `("\nTest FAILED!\n"
                                         "Expected: "   ,(object->string expected)
                                         "\nGot:      " ,(object->string res))))
          (newline)
          #f)
        #t)))

;; This is used in the parser tests to be able to shorten the EXPECTED
;; definition.
(define empty-args '(() #f #f () #f #f () ()))

;; The path to the directory of the current module.
(define load-file-dir
  (let* ((filename (module-filename (current-module)))
         (pos (string-rindex filename #\/)))
    (if pos
        (substring filename 0 pos)
        filename)))


(define (split-string-with split str)
  "Splits a string with the given split string."
  (let ((pos (string-contains str split)))
    (if (not pos)
        (if (equal? str "")
            '()
            (list str))
        (cons (substring str 0 pos)
              (split-string-with
               split
               (string-drop str (+ pos (string-length split))))))))

;; This map holds all test cases.
(define tests-map '())

(define (add-tests group filename)
  "Tries to parse all files starting with the given group prefix in the
python3 directory. It then adds all parsed test cases to tests-map."
  (let* ((file (string-concatenate `(,load-file-dir
                                     "/python3/"
                                     ,filename)))
         (port (open-file file "r"))
         (str (string-trim-both (drain-input port)))
         (test-group (assq group tests-map))
         (tests (split-string-with "### END CODE" str)))
    (if (not test-group)
        (let ((new (list group)))
          (set! tests-map (assq-set! tests-map group new))
          (set! test-group new)))
    (if tests
        (begin
          (pair-for-each
           (lambda (x)
             (let* ((strs (split-string-with "### START CODE\n" (car x)))
                    (data (regexp-exec match-test-data (car strs))))
               (if data
                   (let ((name   (match:substring data 1))
                         (expect (match:substring data 2))
                         (code   (cadr strs)))
                     (set-car! x `(<test> ,name
                                          ,(read (open-input-string expect))
                                          ,code)))
                   (begin
                     (if (not (equal? (car x) ""))
                         (begin
                           (display "WARNING: Couldn't parse testcase!") (newline)
                           (display x)
                           (newline)))))))
           tests)
          (assq-set! tests-map group (append! tests (cdr test-group))))
        (begin
          (display "WARNING: Failed to parse test file ")
          (display filename) (newline)))
    (close-port port)))

;; A simple regexp to parse the name and expected value of a test-case.
(define match-test-data
  (make-regexp "NAME=(.*)\nEXPECTED=(.*)$"))

(define dir (opendir (string-concatenate `(,load-file-dir "/python3"))))

(do ((entry (readdir dir) (readdir dir)))
    ((eof-object? entry))
  (cond ((string-prefix? "parse" entry)
         (add-tests 'parse entry))
        ((string-prefix? "eval" entry)
         (add-tests 'eval entry))))
(closedir dir)

;; This runs all parsing tests.
(with-test-prefix "Python3 parsing"
  (for-each
   (lambda (x)
     (pass-if (cadr x)
       (test-parse (cadddr x) (eval (caddr x) (current-module)))))
   (cdr (assq 'parse tests-map))))

(with-test-prefix "Python3 evaluation"
  (for-each
   (lambda (x)
     (pass-if (cadr x)
       (test-eval (cadddr x) (eval (caddr x) (current-module)))))
   (cdr (assq 'eval tests-map))))
